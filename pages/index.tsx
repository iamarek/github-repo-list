import { cloneDeep } from "lodash";
import type { NextPage } from "next";
import Head from "next/head";
import { useEffect, useState } from "react";
import AddToFavouriteButton from "../components/AddToFavouriteButton";
import FilterRepositoriesButton from "../components/FilterRepositoriesButton";
import RepositoryCard from "../components/RepositoryCard";
import ShowFavouritesButton from "../components/ShowFavouritesButton";
import Spinner from "../components/Spinner";
import { LOCAL_STORAGE_KEY_FAVOURITES } from "../constants/global";
import { Repository } from "../types/types";
import { useFavourites } from "../utils/favouritesContext";
import { getStateFromLocalStorage } from "../utils/localStorage";
import useRepositories from "../utils/useRepositories";

/** Allows to get the data needed for given state, filter via language or favourite selection */
const getCurrentData = (
  showFavourites: boolean,
  favouriteIds: string[],
  filter?: string,
  data?: Repository[]
) => {
  let newData = cloneDeep(data);
  if (filter) {
    newData = newData?.filter((item) => item.language === filter);
  }

  return showFavourites
    ? newData?.filter(({ id }) => favouriteIds.includes(id))
    : newData;
};

const Home: NextPage = () => {
  const { data, isLoading, isError } = useRepositories();
  const [showFavourites, setShowFavourites] = useState(false);
  const [filter, setFilter] = useState<string | undefined>();
  const { favouritesData, updateFavourites } = useFavourites();
  const [activeData, setActiveData] = useState(
    getCurrentData(showFavourites, favouritesData.ids, filter, data)
  );

  // Load initial state of localStorage and update list of favourite repositories
  useEffect(() => {
    const localStorageData =
      getStateFromLocalStorage<string[]>(LOCAL_STORAGE_KEY_FAVOURITES) || [];
    updateFavourites(localStorageData);
  }, []);

  // On change of favourite or filters, recalculate what data should be visible
  useEffect(() => {
    setActiveData(
      getCurrentData(showFavourites, favouritesData.ids, filter, data)
    );
  }, [filter, showFavourites, data, favouritesData.ids]);

  if (isLoading) {
    return (
      <div className="w-[100vw] h-[100vh] flex items-center justify-center">
        <Spinner />
      </div>
    );
  }

  if (isError) {
    return (
      <div className="w-[100vw] h-[100vh] flex items-center justify-center">
        <div className="border mt-10 p-6 text-xl text-center">
          <h2>There has been error, try again later.</h2>
        </div>
      </div>
    );
  }

  return (
    <div>
      <Head>
        <title>Create Next App</title>
        <meta name="description" content="Generated by create next app" />
        <link rel="icon" href="/favicon.ico" />
      </Head>

      <div className="container py-16 mx-auto px-4">
        <h1 className="text-4xl font-bold text-center mb-16">
          GitHub repositories
        </h1>
        <div className="flex flex-col md:flex-row space-y-3 md:space-y-0 justify-between mb-4 w-full">
          <FilterRepositoriesButton filter={filter} setFilter={setFilter} />
          <ShowFavouritesButton
            showFavourites={showFavourites}
            setShowFavourites={setShowFavourites}
          />
        </div>

        {activeData && activeData.length > 0 ? (
          <ul className="grid grid-flow-row gap-3">
            {activeData?.map((repository) => (
              <li key={repository.id} className="grid md:grid-cols-[1fr,_60px]">
                <RepositoryCard repository={repository} />
                <AddToFavouriteButton id={repository.id} />
              </li>
            ))}
          </ul>
        ) : (
          <div className="border mt-10 p-6 text-xl text-center">
            <h2>No repositories available for selected settings</h2>
          </div>
        )}
      </div>
    </div>
  );
};

export default Home;
